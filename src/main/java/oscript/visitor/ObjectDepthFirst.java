//
// Generated by JTB 1.2.1
//

package oscript.visitor;
import oscript.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ObjectDepthFirst implements ObjectVisitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Object visit(NodeList n, Object argu) {
      Object _ret=null;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
      }
      return _ret;
   }

   public Object visit(NodeListOptional n, Object argu) {
      if ( n.present() ) {
         Object _ret=null;
         for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
            ((Node)e.nextElement()).accept(this,argu);
         }
         return _ret;
      }
      else
         return null;
   }

   public Object visit(NodeOptional n, Object argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public Object visit(NodeSequence n, Object argu) {
      Object _ret=null;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
      }
      return _ret;
   }

   public Object visit(NodeToken n, Object argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> ( &lt;UNIX_SELF_EXECUTABLE_COMMENT&gt; )?
    * f1 -> Program(false)
    * f2 -> &lt;EOF&gt;
    * </PRE>
    */
   public Object visit(ProgramFile n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( EvaluationUnit() )*
    * </PRE>
    */
   public Object visit(Program n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ScopeBlock()
    *       | VariableDeclarationBlock()
    *       | FunctionDeclaration()
    *       | TryStatement()
    *       | ForLoopStatement()
    *       | CollectionForLoopStatement()
    *       | WhileLoopStatement()
    *       | ConditionalStatement()
    *       | SynchronizedStatement()
    *       | ReturnStatement()
    *       | BreakStatement()
    *       | ContinueStatement()
    *       | ExpressionBlock()
    *       | ThrowBlock()
    *       | ImportBlock()
    *       | MixinBlock()
    *       | EvalBlock()
    * </PRE>
    */
   public Object visit(EvaluationUnit n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> Program(false)
    * f2 -> "}"
    * </PRE>
    */
   public Object visit(ScopeBlock n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> VariableDeclaration()
    * f1 -> ";"
    * </PRE>
    */
   public Object visit(VariableDeclarationBlock n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> Expression()
    * f1 -> ";"
    * </PRE>
    */
   public Object visit(ExpressionBlock n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "throw"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public Object visit(ThrowBlock n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> "import"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public Object visit(ImportBlock n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> "mixin"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public Object visit(MixinBlock n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> "eval"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public Object visit(EvalBlock n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> Permissions(true)
    * f1 -> "var"
    * f2 -> &lt;IDENTIFIER&gt;
    * f3 -> ( "=" Expression() )?
    * </PRE>
    */
   public Object visit(VariableDeclaration n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> Permissions(true)
    * f1 -> "function"
    * f2 -> &lt;IDENTIFIER&gt;
    * f3 -> "("
    * f4 -> ( Arglist() )?
    * f5 -> ")"
    * f6 -> ( "extends" PrimaryExpressionWithTrailingFxnCallExpList() FunctionCallExpressionList() )?
    * f7 -> "{"
    * f8 -> Program(true)
    * f9 -> "}"
    * </PRE>
    */
   public Object visit(FunctionDeclaration n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> Permissions(false)
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> ( "," Permissions(false) &lt;IDENTIFIER&gt; )*
    * f3 -> ( "..." )?
    * </PRE>
    */
   public Object visit(Arglist n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "try"
    * f1 -> EvaluationUnit()
    * f2 -> ( "catch" "(" Expression() &lt;IDENTIFIER&gt; ")" EvaluationUnit() )*
    * f3 -> ( "catch" "(" &lt;IDENTIFIER&gt; ")" EvaluationUnit() )?
    * f4 -> ( "finally" EvaluationUnit() )?
    * </PRE>
    */
   public Object visit(TryStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> "for"
    * f1 -> "("
    * f2 -> (  PreLoopStatement() )?
    * f3 -> ";"
    * f4 -> ( Expression() )?
    * f5 -> ";"
    * f6 -> ( Expression() )?
    * f7 -> ")"
    * f8 -> EvaluationUnit()
    * </PRE>
    */
   public Object visit(ForLoopStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> "for"
    * f1 -> "("
    * f2 -> PreLoopStatement()
    * f3 -> ":"
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> EvaluationUnit()
    * </PRE>
    */
   public Object visit(CollectionForLoopStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> VariableDeclaration()
    *       | Expression()
    * </PRE>
    */
   public Object visit(PreLoopStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> EvaluationUnit()
    * </PRE>
    */
   public Object visit(WhileLoopStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> EvaluationUnit()
    * f5 -> ( "else" EvaluationUnit() )?
    * </PRE>
    */
   public Object visit(ConditionalStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "synchronized"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> EvaluationUnit()
    * </PRE>
    */
   public Object visit(SynchronizedStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "return"
    * f1 -> ( Expression() )?
    * f2 -> ";"
    * </PRE>
    */
   public Object visit(ReturnStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "break"
    * f1 -> ";"
    * </PRE>
    */
   public Object visit(BreakStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "continue"
    * f1 -> ";"
    * </PRE>
    */
   public Object visit(ContinueStatement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public Object visit(Expression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> ( FunctionCallExpressionListBody() )?
    * f2 -> ")"
    * </PRE>
    */
   public Object visit(FunctionCallExpressionList n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public Object visit(FunctionCallExpressionListBody n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ConditionalExpression()
    * f1 -> ( ( "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&gt;&gt;=" | "&lt;&lt;=" | "&gt;&gt;&gt;=" | "&=" | "^=" | "|=" ) ConditionalExpression() )*
    * </PRE>
    */
   public Object visit(AssignmentExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> LogicalOrExpression()
    * f1 -> ( "?" LogicalOrExpression() ":" LogicalOrExpression() )?
    * </PRE>
    */
   public Object visit(ConditionalExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> LogicalAndExpression()
    * f1 -> ( "||" LogicalAndExpression() )*
    * </PRE>
    */
   public Object visit(LogicalOrExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> BitwiseOrExpression()
    * f1 -> ( "&&" BitwiseOrExpression() )*
    * </PRE>
    */
   public Object visit(LogicalAndExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> BitwiseXorExpression()
    * f1 -> ( "|" BitwiseXorExpression() )*
    * </PRE>
    */
   public Object visit(BitwiseOrExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> BitwiseAndExpression()
    * f1 -> ( "^" BitwiseAndExpression() )*
    * </PRE>
    */
   public Object visit(BitwiseXorExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> EqualityExpression()
    * f1 -> ( "&" EqualityExpression() )*
    * </PRE>
    */
   public Object visit(BitwiseAndExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> RelationalExpression()
    * f1 -> ( ( "==" | "!=" ) RelationalExpression() )*
    * </PRE>
    */
   public Object visit(EqualityExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ShiftExpression()
    * f1 -> ( ( "&lt;" | "&gt;" | "&gt;=" | "&lt;=" | "instanceof" ) ShiftExpression() )*
    * </PRE>
    */
   public Object visit(RelationalExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> AdditiveExpression()
    * f1 -> ( ( "&lt;&lt;" | "&gt;&gt;" | "&gt;&gt;&gt;" ) AdditiveExpression() )*
    * </PRE>
    */
   public Object visit(ShiftExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression()
    * f1 -> ( ( "+" | "-" ) MultiplicativeExpression() )*
    * </PRE>
    */
   public Object visit(AdditiveExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> UnaryExpression()
    * f1 -> ( ( "*" | "/" | "%" ) UnaryExpression() )*
    * </PRE>
    */
   public Object visit(MultiplicativeExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( ( "++" | "--" | "+" | "-" | "~" | "!" ) )?
    * f1 -> PostfixExpression()
    * </PRE>
    */
   public Object visit(UnaryExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> TypeExpression()
    * f1 -> ( "++" | "--" )?
    * </PRE>
    */
   public Object visit(PostfixExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> AllocationExpression()
    *       | CastExpression()
    *       | PrimaryExpression()
    * </PRE>
    */
   public Object visit(TypeExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "new"
    * f1 -> PrimaryExpressionWithTrailingFxnCallExpList()
    * f2 -> FunctionCallExpressionList()
    * </PRE>
    */
   public Object visit(AllocationExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> PrimaryExpressionNotFunction()
    * f2 -> ")"
    * f3 -> PrimaryExpression()
    * </PRE>
    */
   public Object visit(CastExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> PrimaryPrefix()
    * f1 -> ( PrimaryPostfix() )*
    * </PRE>
    */
   public Object visit(PrimaryExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> PrimaryPrefixNotFunction()
    * f1 -> ( PrimaryPostfix() )*
    * </PRE>
    */
   public Object visit(PrimaryExpressionNotFunction n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> PrimaryPrefix()
    * f1 -> ( PrimaryPostfixWithTrailingFxnCallExpList() )*
    * </PRE>
    */
   public Object visit(PrimaryExpressionWithTrailingFxnCallExpList n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> PrimaryPrefixNotFunction()
    *       | FunctionPrimaryPrefix()
    *       | ShorthandFunctionPrimaryPrefix()
    * </PRE>
    */
   public Object visit(PrimaryPrefix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ThisPrimaryPrefix()
    *       | SuperPrimaryPrefix()
    *       | CalleePrimaryPrefix()
    *       | ArrayDeclarationPrimaryPrefix()
    *       | IdentifierPrimaryPrefix()
    *       | ParenPrimaryPrefix()
    *       | Literal()
    * </PRE>
    */
   public Object visit(PrimaryPrefixNotFunction n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "this"
    * </PRE>
    */
   public Object visit(ThisPrimaryPrefix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "super"
    * </PRE>
    */
   public Object visit(SuperPrimaryPrefix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> "callee"
    * </PRE>
    */
   public Object visit(CalleePrimaryPrefix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public Object visit(IdentifierPrimaryPrefix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    * </PRE>
    */
   public Object visit(ParenPrimaryPrefix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> "function"
    * f1 -> "("
    * f2 -> ( Arglist() )?
    * f3 -> ")"
    * f4 -> ( "extends" PrimaryExpressionWithTrailingFxnCallExpList() FunctionCallExpressionList() )?
    * f5 -> "{"
    * f6 -> Program(true)
    * f7 -> "}"
    * </PRE>
    */
   public Object visit(FunctionPrimaryPrefix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> "'{"
    * f1 -> Program(true)
    * f2 -> "}"
    * </PRE>
    */
   public Object visit(ShorthandFunctionPrimaryPrefix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "["
    * f1 -> ( FunctionCallExpressionListBody() )?
    * f2 -> "]"
    * </PRE>
    */
   public Object visit(ArrayDeclarationPrimaryPrefix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> FunctionCallPrimaryPostfix()
    *       | ArraySubscriptPrimaryPostfix()
    *       | ThisScopeQualifierPrimaryPostfix()
    *       | PropertyIdentifierPrimaryPostfix()
    * </PRE>
    */
   public Object visit(PrimaryPostfix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ArraySubscriptPrimaryPostfix()
    *       | ThisScopeQualifierPrimaryPostfix()
    *       | PropertyIdentifierPrimaryPostfix()
    * </PRE>
    */
   public Object visit(PrimaryPostfixWithTrailingFxnCallExpList n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> FunctionCallExpressionList()
    * </PRE>
    */
   public Object visit(FunctionCallPrimaryPostfix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "["
    * f1 -> Expression()
    * f2 -> ( ".." Expression() )?
    * f3 -> "]"
    * </PRE>
    */
   public Object visit(ArraySubscriptPrimaryPostfix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "."
    * f1 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public Object visit(PropertyIdentifierPrimaryPostfix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "."
    * f1 -> "this"
    * </PRE>
    */
   public Object visit(ThisScopeQualifierPrimaryPostfix n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | &lt;REGEXP_LITERAL&gt;
    *       | "true"
    *       | "false"
    *       | "null"
    *       | "undefined"
    * </PRE>
    */
   public Object visit(Literal n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>

    * f0 -> ( "static" | "const" | "private" | "protected" | "public" )*
    * </PRE>
    */
   public Object visit(Permissions n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
