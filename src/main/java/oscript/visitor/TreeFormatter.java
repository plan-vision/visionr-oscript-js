//
// Generated by JTB 1.2.1
//
package oscript.visitor;

import oscript.syntaxtree.*;
import java.util.*;

/**
 * A skeleton output formatter for your language grammar.  Using the
 * add() method along with force(), indent(), and outdent(), you can
 * easily specify how this visitor will format the given syntax tree.
 * See the JTB documentation for more details.
 *
 * Pass your syntax tree to this visitor, and then to the TreeDumper
 * visitor in order to "pretty print" your tree.
 */
public class TreeFormatter extends DepthFirstVisitor {
   private Vector cmdQueue = new Vector();
   private boolean lineWrap;
   private int wrapWidth;
   private int indentAmt;
   private int curLine = 1;
   private int curColumn = 1;
   private int curIndent = 0;

   /**
    * The default constructor assumes an indentation amount of 3 spaces
    * and no line-wrap.  You may alternately use the other constructor to
    * specify your own indentation amount and line width.
    */
   public TreeFormatter() { this(3, 0); }

   /**
    * This constructor accepts an indent amount and a line width which is
    * used to wrap long lines.  If a token's beginColumn value is greater
    * than the specified wrapWidth, it will be moved to the next line and
    * indented one extra level.  To turn off line-wrapping, specify a
    * wrapWidth of 0.
    *
    * @param   indentAmt   Amount of spaces per indentation level.
    * @param   wrapWidth   Wrap lines longer than wrapWidth.  0 for no wrap.
    */
   public TreeFormatter(int indentAmt, int wrapWidth) {
      this.indentAmt = indentAmt;
      this.wrapWidth = wrapWidth;

      if ( wrapWidth > 0 )
         lineWrap = true;
      else
         lineWrap = false;
   }

   /**
    * Accepts a NodeListInterface object and performs an optional format
    * command between each node in the list (but not after the last node).
    */
   protected void processList(NodeListInterface n) {
      processList(n, null);
   }

   protected void processList(NodeListInterface n, FormatCommand cmd) {
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this);
         if ( cmd != null && e.hasMoreElements() )
            cmdQueue.addElement(cmd);
      }
   }

   /**
    * A Force command inserts a line break and indents the next line to
    * the current indentation level.  Use "add(force());".
    */
   protected FormatCommand force() { return force(1); }
   protected FormatCommand force(int i) {
      return new FormatCommand(FormatCommand.FORCE, i);
   }

   /**
    * An Indent command increases the indentation level by one (or a
    * user-specified amount).  Use "add(indent());".
    */
   protected FormatCommand indent() { return indent(1); }
   protected FormatCommand indent(int i) {
      return new FormatCommand(FormatCommand.INDENT, i);
   }

   /**
    * An Outdent command is the reverse of the Indent command: it reduces
    * the indentation level.  Use "add(outdent());".
    */
   protected FormatCommand outdent() { return outdent(1); }
   protected FormatCommand outdent(int i) {
      return new FormatCommand(FormatCommand.OUTDENT, i);
   }

   /**
    * A Space command simply adds one or a user-specified number of
    * spaces between tokens.  Use "add(space());".
    */
   protected FormatCommand space() { return space(1); }
   protected FormatCommand space(int i) {
      return new FormatCommand(FormatCommand.SPACE, i);
   }

   /**
    * Use this method to add FormatCommands to the command queue to be
    * executed when the next token in the tree is visited.
    */
   protected void add(FormatCommand cmd) {
      cmdQueue.addElement(cmd);
   }

   /**
    * Executes the commands waiting in the command queue, then inserts the
    * proper location information into the current NodeToken.
    *
    * If there are any special tokens preceding this token, they will be
    * given the current location information.  The token will follow on
    * the next line, at the proper indentation level.  If this is not the
    * behavior you want from special tokens, feel free to modify this
    * method.
    */
   public void visit(NodeToken n) {
      for ( Enumeration e = cmdQueue.elements(); e.hasMoreElements(); ) {
         FormatCommand cmd = (FormatCommand)e.nextElement();
         switch ( cmd.getCommand() ) {
         case FormatCommand.FORCE :
            curLine += cmd.getNumCommands();
            curColumn = curIndent + 1;
            break;
         case FormatCommand.INDENT :
            curIndent += indentAmt * cmd.getNumCommands();
            break;
         case FormatCommand.OUTDENT :
            if ( curIndent >= indentAmt )
               curIndent -= indentAmt * cmd.getNumCommands();
            break;
         case FormatCommand.SPACE :
            curColumn += cmd.getNumCommands();
            break;
         default :
            throw new TreeFormatterException(
               "Invalid value in command queue.");
         }
      }

      cmdQueue.removeAllElements();

      //
      // Handle all special tokens preceding this NodeToken
      //
      if ( n.numSpecials() > 0 )
         for ( Enumeration e = n.specialTokens.elements();
               e.hasMoreElements(); ) {
            NodeToken special = (NodeToken)e.nextElement();

            //
            // -Place the token.
            // -Move cursor to next line after the special token.
            // -Don't update curColumn--want to keep current indent level.
            //
            placeToken(special, curLine, curColumn);
            curLine = special.endLine + 1;
         }

      placeToken(n, curLine, curColumn);
      curLine = n.endLine;
      curColumn = n.endColumn;
   }

   /**
    * Inserts token location (beginLine, beginColumn, endLine, endColumn)
    * information into the NodeToken.  Takes into account line-wrap.
    * Does not update curLine and curColumn.
    */
   private void placeToken(NodeToken n, int line, int column) {
      int length = n.tokenImage.length();

      //
      // Find beginning of token.  Only line-wrap for single-line tokens
      //
      if ( !lineWrap || n.tokenImage.indexOf('\n') != -1 ||
           column + length <= wrapWidth )
         n.beginColumn = column;
      else {
         ++line;
         column = curIndent + indentAmt + 1;
         n.beginColumn = column;
      }

      n.beginLine = line;

      //
      // Find end of token; don't count \n if it's the last character
      //
      for ( int i = 0; i < length; ++i ) {
         if ( n.tokenImage.charAt(i) == '\n' && i < length - 1 ) {
            ++line;
            column = 1;
         }
         else
            ++column;
      }

      n.endLine = line;
      n.endColumn = column;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> ( &lt;UNIX_SELF_EXECUTABLE_COMMENT&gt; )?
    * f1 -> Program(false)
    * f2 -> &lt;EOF&gt;
    * </PRE>
    */
   public void visit(ProgramFile n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( EvaluationUnit() )*
    * </PRE>
    */
   public void visit(Program n) {
      if ( n.f0.present() ) {
         processList(n.f0);
      }
   }

   /**
    * <PRE>
    * f0 -> ScopeBlock()
    *       | VariableDeclarationBlock()
    *       | FunctionDeclaration()
    *       | TryStatement()
    *       | ForLoopStatement()
    *       | CollectionForLoopStatement()
    *       | WhileLoopStatement()
    *       | ConditionalStatement()
    *       | SynchronizedStatement()
    *       | ReturnStatement()
    *       | BreakStatement()
    *       | ContinueStatement()
    *       | ExpressionBlock()
    *       | ThrowBlock()
    *       | ImportBlock()
    *       | MixinBlock()
    *       | EvalBlock()
    * </PRE>
    */
   public void visit(EvaluationUnit n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> Program(false)
    * f2 -> "}"
    * </PRE>
    */
   public void visit(ScopeBlock n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> VariableDeclaration()
    * f1 -> ";"
    * </PRE>
    */
   public void visit(VariableDeclarationBlock n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> Expression()
    * f1 -> ";"
    * </PRE>
    */
   public void visit(ExpressionBlock n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "throw"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public void visit(ThrowBlock n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>

    * f0 -> "import"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public void visit(ImportBlock n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>

    * f0 -> "mixin"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public void visit(MixinBlock n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>

    * f0 -> "eval"
    * f1 -> Expression()
    * f2 -> ";"
    * </PRE>
    */
   public void visit(EvalBlock n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>

    * f0 -> Permissions(true)
    * f1 -> "var"
    * f2 -> &lt;IDENTIFIER&gt;
    * f3 -> ( "=" Expression() )?
    * </PRE>
    */
   public void visit(VariableDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if ( n.f3.present() ) {
         n.f3.accept(this);
      }
   }

   /**
    * <PRE>

    * f0 -> Permissions(true)
    * f1 -> "function"
    * f2 -> &lt;IDENTIFIER&gt;
    * f3 -> "("
    * f4 -> ( Arglist() )?
    * f5 -> ")"
    * f6 -> ( "extends" PrimaryExpressionWithTrailingFxnCallExpList() FunctionCallExpressionList() )?
    * f7 -> "{"
    * f8 -> Program(true)
    * f9 -> "}"
    * </PRE>
    */
   public void visit(FunctionDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if ( n.f4.present() ) {
         n.f4.accept(this);
      }
      n.f5.accept(this);
      if ( n.f6.present() ) {
         n.f6.accept(this);
      }
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
   }

   /**
    * <PRE>
    * f0 -> Permissions(false)
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> ( "," Permissions(false) &lt;IDENTIFIER&gt; )*
    * f3 -> ( "..." )?
    * </PRE>
    */
   public void visit(Arglist n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         processList(n.f2);
      }
      if ( n.f3.present() ) {
         n.f3.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> "try"
    * f1 -> EvaluationUnit()
    * f2 -> ( "catch" "(" Expression() &lt;IDENTIFIER&gt; ")" EvaluationUnit() )*
    * f3 -> ( "catch" "(" &lt;IDENTIFIER&gt; ")" EvaluationUnit() )?
    * f4 -> ( "finally" EvaluationUnit() )?
    * </PRE>
    */
   public void visit(TryStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         processList(n.f2);
      }
      if ( n.f3.present() ) {
         n.f3.accept(this);
      }
      if ( n.f4.present() ) {
         n.f4.accept(this);
      }
   }

   /**
    * <PRE>

    * f0 -> "for"
    * f1 -> "("
    * f2 -> (  PreLoopStatement() )?
    * f3 -> ";"
    * f4 -> ( Expression() )?
    * f5 -> ";"
    * f6 -> ( Expression() )?
    * f7 -> ")"
    * f8 -> EvaluationUnit()
    * </PRE>
    */
   public void visit(ForLoopStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      n.f3.accept(this);
      if ( n.f4.present() ) {
         n.f4.accept(this);
      }
      n.f5.accept(this);
      if ( n.f6.present() ) {
         n.f6.accept(this);
      }
      n.f7.accept(this);
      n.f8.accept(this);
   }

   /**
    * <PRE>

    * f0 -> "for"
    * f1 -> "("
    * f2 -> PreLoopStatement()
    * f3 -> ":"
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> EvaluationUnit()
    * </PRE>
    */
   public void visit(CollectionForLoopStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * <PRE>
    * f0 -> VariableDeclaration()
    *       | Expression()
    * </PRE>
    */
   public void visit(PreLoopStatement n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> EvaluationUnit()
    * </PRE>
    */
   public void visit(WhileLoopStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> EvaluationUnit()
    * f5 -> ( "else" EvaluationUnit() )?
    * </PRE>
    */
   public void visit(ConditionalStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      if ( n.f5.present() ) {
         n.f5.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> "synchronized"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> EvaluationUnit()
    * </PRE>
    */
   public void visit(SynchronizedStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "return"
    * f1 -> ( Expression() )?
    * f2 -> ";"
    * </PRE>
    */
   public void visit(ReturnStatement n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "break"
    * f1 -> ";"
    * </PRE>
    */
   public void visit(BreakStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "continue"
    * f1 -> ";"
    * </PRE>
    */
   public void visit(ContinueStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public void visit(Expression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> ( FunctionCallExpressionListBody() )?
    * f2 -> ")"
    * </PRE>
    */
   public void visit(FunctionCallExpressionList n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public void visit(FunctionCallExpressionListBody n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> ConditionalExpression()
    * f1 -> ( ( "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&gt;&gt;=" | "&lt;&lt;=" | "&gt;&gt;&gt;=" | "&=" | "^=" | "|=" ) ConditionalExpression() )*
    * </PRE>
    */
   public void visit(AssignmentExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> LogicalOrExpression()
    * f1 -> ( "?" LogicalOrExpression() ":" LogicalOrExpression() )?
    * </PRE>
    */
   public void visit(ConditionalExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> LogicalAndExpression()
    * f1 -> ( "||" LogicalAndExpression() )*
    * </PRE>
    */
   public void visit(LogicalOrExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> BitwiseOrExpression()
    * f1 -> ( "&&" BitwiseOrExpression() )*
    * </PRE>
    */
   public void visit(LogicalAndExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> BitwiseXorExpression()
    * f1 -> ( "|" BitwiseXorExpression() )*
    * </PRE>
    */
   public void visit(BitwiseOrExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> BitwiseAndExpression()
    * f1 -> ( "^" BitwiseAndExpression() )*
    * </PRE>
    */
   public void visit(BitwiseXorExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> EqualityExpression()
    * f1 -> ( "&" EqualityExpression() )*
    * </PRE>
    */
   public void visit(BitwiseAndExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> RelationalExpression()
    * f1 -> ( ( "==" | "!=" ) RelationalExpression() )*
    * </PRE>
    */
   public void visit(EqualityExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> ShiftExpression()
    * f1 -> ( ( "&lt;" | "&gt;" | "&gt;=" | "&lt;=" | "instanceof" ) ShiftExpression() )*
    * </PRE>
    */
   public void visit(RelationalExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> AdditiveExpression()
    * f1 -> ( ( "&lt;&lt;" | "&gt;&gt;" | "&gt;&gt;&gt;" ) AdditiveExpression() )*
    * </PRE>
    */
   public void visit(ShiftExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression()
    * f1 -> ( ( "+" | "-" ) MultiplicativeExpression() )*
    * </PRE>
    */
   public void visit(AdditiveExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> UnaryExpression()
    * f1 -> ( ( "*" | "/" | "%" ) UnaryExpression() )*
    * </PRE>
    */
   public void visit(MultiplicativeExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> ( ( "++" | "--" | "+" | "-" | "~" | "!" ) )?
    * f1 -> PostfixExpression()
    * </PRE>
    */
   public void visit(UnaryExpression n) {
      if ( n.f0.present() ) {
         n.f0.accept(this);
      }
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> TypeExpression()
    * f1 -> ( "++" | "--" )?
    * </PRE>
    */
   public void visit(PostfixExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
   }

   /**
    * <PRE>
    * f0 -> AllocationExpression()
    *       | CastExpression()
    *       | PrimaryExpression()
    * </PRE>
    */
   public void visit(TypeExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "new"
    * f1 -> PrimaryExpressionWithTrailingFxnCallExpList()
    * f2 -> FunctionCallExpressionList()
    * </PRE>
    */
   public void visit(AllocationExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> PrimaryExpressionNotFunction()
    * f2 -> ")"
    * f3 -> PrimaryExpression()
    * </PRE>
    */
   public void visit(CastExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> PrimaryPrefix()
    * f1 -> ( PrimaryPostfix() )*
    * </PRE>
    */
   public void visit(PrimaryExpression n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> PrimaryPrefixNotFunction()
    * f1 -> ( PrimaryPostfix() )*
    * </PRE>
    */
   public void visit(PrimaryExpressionNotFunction n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> PrimaryPrefix()
    * f1 -> ( PrimaryPostfixWithTrailingFxnCallExpList() )*
    * </PRE>
    */
   public void visit(PrimaryExpressionWithTrailingFxnCallExpList n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         processList(n.f1);
      }
   }

   /**
    * <PRE>
    * f0 -> PrimaryPrefixNotFunction()
    *       | FunctionPrimaryPrefix()
    *       | ShorthandFunctionPrimaryPrefix()
    * </PRE>
    */
   public void visit(PrimaryPrefix n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ThisPrimaryPrefix()
    *       | SuperPrimaryPrefix()
    *       | CalleePrimaryPrefix()
    *       | ArrayDeclarationPrimaryPrefix()
    *       | IdentifierPrimaryPrefix()
    *       | ParenPrimaryPrefix()
    *       | Literal()
    * </PRE>
    */
   public void visit(PrimaryPrefixNotFunction n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "this"
    * </PRE>
    */
   public void visit(ThisPrimaryPrefix n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "super"
    * </PRE>
    */
   public void visit(SuperPrimaryPrefix n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>

    * f0 -> "callee"
    * </PRE>
    */
   public void visit(CalleePrimaryPrefix n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public void visit(IdentifierPrimaryPrefix n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    * </PRE>
    */
   public void visit(ParenPrimaryPrefix n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>

    * f0 -> "function"
    * f1 -> "("
    * f2 -> ( Arglist() )?
    * f3 -> ")"
    * f4 -> ( "extends" PrimaryExpressionWithTrailingFxnCallExpList() FunctionCallExpressionList() )?
    * f5 -> "{"
    * f6 -> Program(true)
    * f7 -> "}"
    * </PRE>
    */
   public void visit(FunctionPrimaryPrefix n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      n.f3.accept(this);
      if ( n.f4.present() ) {
         n.f4.accept(this);
      }
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
   }

   /**
    * <PRE>

    * f0 -> "'{"
    * f1 -> Program(true)
    * f2 -> "}"
    * </PRE>
    */
   public void visit(ShorthandFunctionPrimaryPrefix n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "["
    * f1 -> ( FunctionCallExpressionListBody() )?
    * f2 -> "]"
    * </PRE>
    */
   public void visit(ArrayDeclarationPrimaryPrefix n) {
      n.f0.accept(this);
      if ( n.f1.present() ) {
         n.f1.accept(this);
      }
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> FunctionCallPrimaryPostfix()
    *       | ArraySubscriptPrimaryPostfix()
    *       | ThisScopeQualifierPrimaryPostfix()
    *       | PropertyIdentifierPrimaryPostfix()
    * </PRE>
    */
   public void visit(PrimaryPostfix n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ArraySubscriptPrimaryPostfix()
    *       | ThisScopeQualifierPrimaryPostfix()
    *       | PropertyIdentifierPrimaryPostfix()
    * </PRE>
    */
   public void visit(PrimaryPostfixWithTrailingFxnCallExpList n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> FunctionCallExpressionList()
    * </PRE>
    */
   public void visit(FunctionCallPrimaryPostfix n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "["
    * f1 -> Expression()
    * f2 -> ( ".." Expression() )?
    * f3 -> "]"
    * </PRE>
    */
   public void visit(ArraySubscriptPrimaryPostfix n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if ( n.f2.present() ) {
         n.f2.accept(this);
      }
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "."
    * f1 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public void visit(PropertyIdentifierPrimaryPostfix n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "."
    * f1 -> "this"
    * </PRE>
    */
   public void visit(ThisScopeQualifierPrimaryPostfix n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | &lt;REGEXP_LITERAL&gt;
    *       | "true"
    *       | "false"
    *       | "null"
    *       | "undefined"
    * </PRE>
    */
   public void visit(Literal n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>

    * f0 -> ( "static" | "const" | "private" | "protected" | "public" )*
    * </PRE>
    */
   public void visit(Permissions n) {
      if ( n.f0.present() ) {
         processList(n.f0);
      }
   }

}

class FormatCommand {
   public static final int FORCE = 0;
   public static final int INDENT = 1;
   public static final int OUTDENT = 2;
   public static final int SPACE = 3;

   private int command;
   private int numCommands;

   FormatCommand(int command, int numCommands) {
      this.command = command;
      this.numCommands = numCommands;
   }

   public int getCommand()             { return command; }
   public int getNumCommands()         { return numCommands; }
   public void setCommand(int i)       { command = i; }
   public void setNumCommands(int i)   { numCommands = i; }
}

class TreeFormatterException extends RuntimeException {
   TreeFormatterException()         { super(); }
   TreeFormatterException(String s) { super(s); }
}
