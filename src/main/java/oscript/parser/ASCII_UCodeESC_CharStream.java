/* Generated By:JavaCC: Do not edit this line. ASCII_UCodeESC_CharStream.java Version 0.7pre6 */
package oscript.parser;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.Stack;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (with java-like unicode escape processing).
 */
public final class ASCII_UCodeESC_CharStream
{
  private static final int MASK = 0xFFFF;
  public static final boolean staticFlag = true;
  static final int hexval(char c) throws java.io.IOException {
    switch(c)
    {
       case '0' :
          return 0;
       case '1' :
          return 1;
       case '2' :
          return 2;
       case '3' :
          return 3;
       case '4' :
          return 4;
       case '5' :
          return 5;
       case '6' :
          return 6;
       case '7' :
          return 7;
       case '8' :
          return 8;
       case '9' :
          return 9;

       case 'a' :
       case 'A' :
          return 10;
       case 'b' :
       case 'B' :
          return 11;
       case 'c' :
       case 'C' :
          return 12;
       case 'd' :
       case 'D' :
          return 13;
       case 'e' :
       case 'E' :
          return 14;
       case 'f' :
       case 'F' :
          return 15;
    }

    throw new java.io.IOException(); // Should never come here
  }

  static public int bufpos = -1;
  static int bufsize;
  static int available;
  static int tokenBegin;
  static private int bufline[];
  static private int bufcolumn[];
  static private int bufoff[];
  
  static private int off = 0;
  static private int column = 0;
  static private int line = 1;

  static private java.io.BufferedReader inputStream;

  static private boolean prevCharIsCR = false;
  static private boolean prevCharIsLF = false;

  static private char[] nextCharBuf;
  static private char[] buffer;
  static private int maxNextCharInd = 0;
  static private int nextCharInd = -1;
  static private int inBuf = 0;
  static final String CDATA_LEFT = "<![CDATA[";
  static final String CDATA_RIGHT = "]]>";
  static Stack<String> cdataStack = new Stack<String>();

  static private final void ExpandBuff(boolean wrapAround)
  {
     char[] newbuffer = new char[bufsize + 2048];
     int newbufline[] = new int[bufsize + 2048];
     int newbufcolumn[] = new int[bufsize + 2048];
     int newbufoff[] = new int[bufsize + 2048];

     try
     {
        if (wrapAround)
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           System.arraycopy(buffer, 0, newbuffer,
                                             bufsize - tokenBegin, bufpos);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
           bufcolumn = newbufcolumn;

           System.arraycopy(bufoff, tokenBegin, newbufoff, 0, bufsize - tokenBegin);
           System.arraycopy(bufoff, 0, newbufoff, bufsize - tokenBegin, bufpos);
           bufoff = newbufoff;

           bufpos += (bufsize - tokenBegin);
        }
        else
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           bufcolumn = newbufcolumn;

           System.arraycopy(bufoff, tokenBegin, newbufoff, 0, bufsize - tokenBegin);
           bufoff = newbufoff;

           bufpos -= tokenBegin;
        }
     }
     catch (Throwable t)
     {
        throw new Error(t.getMessage());
     }

     available = (bufsize += 2048);
     tokenBegin = 0;
  }

	static void parseVSCLine(StringBuffer buf, String line, Stack<String> cdataStack) throws IOException {
		if (line.startsWith(CDATA_LEFT)) {
			if (cdataStack.isEmpty()) {
				line = line.substring(CDATA_LEFT.length(),line.length());
				buf.append( "/* " );
				buf.append( CDATA_LEFT );
				buf.append( " */" );
				
			}
			cdataStack.push(CDATA_LEFT);
		}
		
		if (line.startsWith(CDATA_RIGHT)) {
			if (cdataStack.isEmpty()) {
				throw new IOException("Tag " + CDATA_RIGHT + " without preceeding " + CDATA_LEFT);
			}
			cdataStack.pop();
			if (cdataStack.isEmpty()) {
				buf.append( "\"\"/* " );
				buf.append( CDATA_RIGHT );
				buf.append( " */" );
				buf.append( line.substring(CDATA_RIGHT.length(), line.length()) );
				return;
			}
		}
		
		if (cdataStack.isEmpty()) {
			buf.append(line );
		} else {
			buf.append( "\"" );
			line = line.replace("\\", "\\\\");
			buf.append( line.replace("\"", "\\\"") );
			buf.append( "\\n\" + " );
		}
	}
	
  static private final void FillBuff() throws java.io.IOException
  {
     try {
    	 if (!inputStream.ready()) {
    		 inputStream.close();
    		 throw new java.io.IOException();
     	 }
    	 String line;
    	 StringBuffer buf = new StringBuffer();
    	 while( (line = inputStream.readLine()) != null ) {
    		 //System.out.println(count++ + ": " + line);
    		 parseVSCLine(buf, line,cdataStack);
    		 buf.append("\n");
    		 if (buf.length() >= 16384)
    			 break;
    	 }
    	 if (buf.length() > nextCharBuf.length) {
    		 nextCharBuf = new char[buf.length()];
    	 }
    	 buf.getChars(0, buf.length(), nextCharBuf, 0);
         maxNextCharInd = buf.length();
         nextCharInd = 0;
         if (line == null) {
    		 inputStream.close();
         }
         return;
     }
     catch(java.io.IOException e) {
        if (bufpos != 0)
        {
           --bufpos;
           backup(0);
        }
        else
        {
           bufline[bufpos] = line;
           bufcolumn[bufpos] = column;
           bufoff[bufpos] = off;
        }
        throw e;
     }
  }

  static private final char ReadByte() throws java.io.IOException
  {
     if (++nextCharInd >= maxNextCharInd)
        FillBuff();

     return nextCharBuf[nextCharInd];
  }

  static public final char BeginToken() throws java.io.IOException
  {     
     if (inBuf > 0)
     {
        --inBuf;
        return buffer[tokenBegin = (bufpos == bufsize - 1) ? (bufpos = 0)
                                                           : ++bufpos];
     }

     tokenBegin = 0;
     bufpos = -1;

     return readChar();
  }     

  static private final void AdjustBuffSize()
  {
     if (available == bufsize)
     {
        if (tokenBegin > 2048)
        {
           bufpos = 0;
           available = tokenBegin;
        }
        else
           ExpandBuff(false);
     }
     else if (available > tokenBegin)
        available = bufsize;
     else if ((tokenBegin - available) < 2048)
        ExpandBuff(true);
     else
        available = tokenBegin;
  }

  static private final void UpdateLineColumn(char c)
  {
     column++;
     
     if (prevCharIsLF)
     {
        prevCharIsLF = false;
        line += (column = 1);
     }
     else if (prevCharIsCR)
     {
        prevCharIsCR = false;
        if (c == '\n')
        {
           prevCharIsLF = true;
        }
        else
           line += (column = 1);
     }

     switch (c)
     {
        case '\r' :
           prevCharIsCR = true;
           break;
        case '\n' :
           prevCharIsLF = true;
           break;
        case '\t' :
           column--;
           column += (8 - (column & 07));
           break;
        default :
           break;
     }

     bufline[bufpos] = line;
     bufcolumn[bufpos] = column;
     bufoff[bufpos] = off++;
  }

  static public final char readChar() throws java.io.IOException
  {
     if (inBuf > 0)
     {
        --inBuf;
        return buffer[(bufpos == bufsize - 1) ? (bufpos = 0) : ++bufpos];
     }

     char c;

     if (++bufpos == available)
        AdjustBuffSize();

     if (((buffer[bufpos] = c = (char)((char)MASK & ReadByte())) == '\\'))
     {
        UpdateLineColumn(c);

        int backSlashCnt = 1;

        for (;;) // Read all the backslashes
        {
           if (++bufpos == available)
              AdjustBuffSize();

           try
           {
              if ((buffer[bufpos] = c = (char)((char)MASK & ReadByte())) != '\\')
              {
                 UpdateLineColumn(c);
                 // found a non-backslash char.
                 if ((c == 'u') && ((backSlashCnt & 1) == 1))
                 {
                    if (--bufpos < 0)
                       bufpos = bufsize - 1;

                    break;
                 }

                 backup(backSlashCnt);
                 return '\\';
              }
           }
           catch(java.io.IOException e)
           {
              if (backSlashCnt > 1)
                 backup(backSlashCnt);

              return '\\';
           }

           UpdateLineColumn(c);
           backSlashCnt++;
        }

        // Here, we have seen an odd number of backslash's followed by a 'u'
        try
        {
           // do we need to update offset here?
           while ((c = (char)((char)MASK & ReadByte())) == 'u')
              ++column;

           buffer[bufpos] = c = (char)(hexval(c) << 12 |
                                       hexval((char)((char)MASK & ReadByte())) << 8 |
                                       hexval((char)((char)MASK & ReadByte())) << 4 |
                                       hexval((char)((char)MASK & ReadByte())));

           column += 4;
        }
        catch(java.io.IOException e)
        {
           throw new Error("Invalid escape character at line " + line +
                                         " column " + column + ".");
        }

        if (backSlashCnt == 1)
           return c;
        else
        {
           backup(backSlashCnt - 1);
           return '\\';
        }
     }
     else
     {
        UpdateLineColumn(c);
        return (c);
     }
  }

  /**
   * @deprecated 
   * @see #getEndColumn
   */

  static public final int getColumn() {
     return bufcolumn[bufpos];
  }

  /**
   * @deprecated 
   * @see #getEndLine
   */

  static public final int getLine() {
     return bufline[bufpos];
  }

  static public final int getEndColumn() {
     return bufcolumn[bufpos];
  }

  static public final int getEndLine() {
     return bufline[bufpos];
  }

  static public final int getBeginColumn() {
     return bufcolumn[tokenBegin];
  }

  static public final int getBeginLine() {
     return bufline[tokenBegin];
  }
  
  static public final int getBeginOffset() {
    return bufoff[tokenBegin];
  }
  
  static public final int getEndOffset() {
    return bufoff[bufpos];
  }
  
  static public final void backup(int amount) {

    inBuf += amount;
    if ((bufpos -= amount) < 0)
       bufpos += bufsize;
  }

  public ASCII_UCodeESC_CharStream(java.io.Reader dstream,
                 int startline, int startcolumn, int buffersize)
  {
    if (inputStream != null)
       throw new Error("\n   ERROR: Second call to the constructor of a static ASCII_UCodeESC_CharStream.  You must\n" +
       "       either use ReInit() or set the JavaCC option STATIC to false\n" +
       "       during the generation of this class.");
    inputStream = new BufferedReader(dstream);
    line = startline;
    column = startcolumn - 1;
    off = 0;

    available = bufsize = buffersize;
    buffer = new char[buffersize];
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
    bufoff = new int[buffersize];
    nextCharBuf = new char[16384];
  }

  public ASCII_UCodeESC_CharStream(java.io.Reader dstream,
                                        int startline, int startcolumn)
  {
     this(dstream, startline, startcolumn, 16384);
  }
  public void ReInit(java.io.Reader dstream,
                 int startline, int startcolumn, int buffersize)
  {
    inputStream = new BufferedReader(dstream);
    line = startline;
    column = startcolumn - 1;
    off = 0;

    if (buffer == null || buffersize != buffer.length)
    {
      available = bufsize = buffersize;
      buffer = new char[buffersize];
      bufline = new int[buffersize];
      bufcolumn = new int[buffersize];
      bufoff = new int[buffersize];
      nextCharBuf = new char[16384];
      cdataStack = new Stack<String>(); 
    }
    cdataStack.clear();
    prevCharIsLF = prevCharIsCR = false;
    tokenBegin = inBuf = maxNextCharInd = 0;
    nextCharInd = bufpos = -1;
  }

  public void ReInit(java.io.Reader dstream,
                                        int startline, int startcolumn)
  {
     ReInit(dstream, startline, startcolumn, 16384);
  }
  public ASCII_UCodeESC_CharStream(java.io.InputStream dstream, int startline,
  int startcolumn, int buffersize)
  {
     this(new java.io.InputStreamReader(dstream), startline, startcolumn, 16384);
  }

  public ASCII_UCodeESC_CharStream(java.io.InputStream dstream, int startline,
                                                           int startcolumn)
  {
     this(dstream, startline, startcolumn, 16384);
  }

  public void ReInit(java.io.InputStream dstream, int startline,
  int startcolumn, int buffersize)
  {
     ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 16384);
  }
  public void ReInit(java.io.InputStream dstream, int startline,
                                                           int startcolumn)
  {
     ReInit(dstream, startline, startcolumn, 16384);
  }

  static public final String GetImage()
  {
     if (bufpos >= tokenBegin)
        return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
     else
        return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                              new String(buffer, 0, bufpos + 1);
  }

  static public final char[] GetSuffix(int len)
  {
     char[] ret = new char[len];

     if ((bufpos + 1) >= len)
        System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
     else
     {
        System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                          len - bufpos - 1);
        System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
     }

     return ret;
  }

  static public void Done()
  {
     nextCharBuf = null;
     buffer = null;
     bufline = null;
     bufcolumn = null;
     bufoff = null;
  }

  /**
   * Method to adjust line and column numbers for the start of a token.<BR>
   */
  static public void adjustBeginLineColumn(int newLine, int newCol)
  {
     int start = tokenBegin;
     int len;

     if (bufpos >= tokenBegin)
     {
        len = bufpos - tokenBegin + inBuf + 1;
     }
     else
     {
        len = bufsize - tokenBegin + bufpos + 1 + inBuf;
     }

     int i = 0, j = 0, k = 0;
     int nextColDiff = 0, columnDiff = 0;

     while (i < len &&
            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
     {
        bufline[j] = newLine;
        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
        bufcolumn[j] = newCol + columnDiff;
        columnDiff = nextColDiff;
        i++;
     } 

     if (i < len)
     {
        bufline[j] = newLine++;
        bufcolumn[j] = newCol + columnDiff;

        while (i++ < len)
        {
           if (bufline[j = start % bufsize] != bufline[++start % bufsize])
              bufline[j] = newLine++;
           else
              bufline[j] = newLine;
        }
     }

     line = bufline[j];
     column = bufcolumn[j];
     off = bufoff[j];
  }
}
  
