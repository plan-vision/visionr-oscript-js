/* Generated By:JavaCC: Do not edit this line. OscriptParser.java */
package oscript.parser;

import java.util.Vector;
import oscript.syntaxtree.*;


public class OscriptParser implements OscriptParserConstants {
   private static Vector nodeTokens = null;
   static final void addNodeToken(NodeToken n)
   {
      if ( nodeTokens != null )
         nodeTokens.addElement(n);
   }
   public static final void resetNodeTokens()
   {
      nodeTokens = new Vector(100);
   }
   public static final Vector getNodeTokens()
   {
      Vector oldNodeTokens = nodeTokens;
      nodeTokens = null;
      return oldNodeTokens;
   }
   public static String getTokenString(int kind)
   {
      return OscriptParserConstants.tokenImage[kind];
   }
   private static boolean hasVarInScope = false;
   private static boolean hasFxnInScope = false;
   private static boolean forceScopeCreation = false;
   private static boolean isStatic = false;
   private static boolean isInLoop = false;
   private static boolean isInFunction = false;
   private static void parseError(String msg) throws ParseException
   {
      ParseException pe = new ParseException(msg);
      pe.currentToken = token;
      throw pe;
   }

    
  static final public ProgramFile ProgramFile() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   Program n3;
   NodeToken n4;
   Token n5;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIX_SELF_EXECUTABLE_COMMENT:
      n2 = jj_consume_token(UNIX_SELF_EXECUTABLE_COMMENT);
                                          n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    n3 = Program(false);
    n5 = jj_consume_token(0);
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
     return new ProgramFile(n0,n3,n4);
    // // throw new Error("Missing return statement in function");
  }

  static final public Program Program(boolean staticOk) throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   EvaluationUnit n1;

   {
   }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CALLEE:
      case CONST:
      case CONTINUE:
      case EVAL:
      case FALSE:
      case FOR:
      case FUNCTION:
      case IF:
      case IMPORT:
      case MIXIN:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case STATIC:
      case SUPER:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case UNDEFINED:
      case VAR:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case REGEXP_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LFXNBRACE:
      case LBRACE:
      case LBRACKET:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n1 = EvaluationUnit();
         if ( isStatic )
         {
            if ( staticOk )
               n1.isStatic = true;
            else
               parseError("cannot be static");
         }
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     return new Program(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public EvaluationUnit EvaluationUnit() throws ParseException {
   NodeChoice n0;
   ScopeBlock n1;
   VariableDeclarationBlock n2;
   FunctionDeclaration n3;
   TryStatement n4;
   ForLoopStatement n5;
   CollectionForLoopStatement n6;
   WhileLoopStatement n7;
   ConditionalStatement n8;
   SynchronizedStatement n9;
   ReturnStatement n10;
   BreakStatement n11;
   ContinueStatement n12;
   ExpressionBlock n13;
   ThrowBlock n14;
   ImportBlock n15;
   MixinBlock n16;
   EvalBlock n17;

   {
      isStatic = false;
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n1 = ScopeBlock();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_1(2147483647)) {
        n2 = VariableDeclarationBlock();
        n0 = new NodeChoice(n2, 1);
      } else if (jj_2_2(2147483647)) {
        n3 = FunctionDeclaration();
        n0 = new NodeChoice(n3, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRY:
          n4 = TryStatement();
        n0 = new NodeChoice(n4, 3);
          break;
        default:
          jj_la1[3] = jj_gen;
          if (jj_2_3(2147483647)) {
            n5 = ForLoopStatement();
        n0 = new NodeChoice(n5, 4);
          } else if (jj_2_4(2147483647)) {
            n6 = CollectionForLoopStatement();
        n0 = new NodeChoice(n6, 5);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WHILE:
              n7 = WhileLoopStatement();
        n0 = new NodeChoice(n7, 6);
              break;
            case IF:
              n8 = ConditionalStatement();
        n0 = new NodeChoice(n8, 7);
              break;
            case SYNCHRONIZED:
              n9 = SynchronizedStatement();
        n0 = new NodeChoice(n9, 8);
              break;
            case RETURN:
              n10 = ReturnStatement();
        n0 = new NodeChoice(n10, 9);
              break;
            case BREAK:
              n11 = BreakStatement();
        n0 = new NodeChoice(n11, 10);
              break;
            case CONTINUE:
              n12 = ContinueStatement();
        n0 = new NodeChoice(n12, 11);
              break;
            case CALLEE:
            case FALSE:
            case FUNCTION:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case UNDEFINED:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case REGEXP_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LFXNBRACE:
            case LBRACKET:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
              n13 = ExpressionBlock();
        n0 = new NodeChoice(n13, 12);
              break;
            case THROW:
              n14 = ThrowBlock();
        n0 = new NodeChoice(n14, 13);
              break;
            case IMPORT:
              n15 = ImportBlock();
        n0 = new NodeChoice(n15, 14);
              break;
            case MIXIN:
              n16 = MixinBlock();
        n0 = new NodeChoice(n16, 15);
              break;
            case EVAL:
              n17 = EvalBlock();
        n0 = new NodeChoice(n17, 16);
              break;
            default:
              jj_la1[4] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
     return new EvaluationUnit(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public ScopeBlock ScopeBlock() throws ParseException {
   NodeToken n0;
   Token n1;
   Program n2;
   NodeToken n3;
   Token n4;

   {
   }
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
      boolean savedHasVarInScope = hasVarInScope;
      boolean savedHasFxnInScope = hasFxnInScope;
      hasFxnInScope = hasVarInScope = false;
    n2 = Program(false);
      boolean hadVarInScope = hasVarInScope;
      boolean hadFxnInScope = hasFxnInScope;
      hasVarInScope = savedHasVarInScope;
      hasFxnInScope = savedHasFxnInScope || hasFxnInScope;
    n4 = jj_consume_token(RBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
     return new ScopeBlock(n0,n2,n3,hadVarInScope,hadFxnInScope);
    // throw new Error("Missing return statement in function");
  }

  static final public VariableDeclarationBlock VariableDeclarationBlock() throws ParseException {
   VariableDeclaration n0;
   NodeToken n1;
   Token n2;

   {
   }
    n0 = VariableDeclaration(true);
    n2 = jj_consume_token(SEMICOLON);
            n1 = JTBToolkit.makeNodeToken(n2);
     return new VariableDeclarationBlock(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public ExpressionBlock ExpressionBlock() throws ParseException {
   Expression n0;
   NodeToken n1;
   Token n2;

   {
   }
    n0 = Expression();
    n2 = jj_consume_token(SEMICOLON);
            n1 = JTBToolkit.makeNodeToken(n2);
     return new ExpressionBlock(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public ThrowBlock ThrowBlock() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   {
   }
    n1 = jj_consume_token(THROW);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     return new ThrowBlock(n0,n2,n3);
    // throw new Error("Missing return statement in function");
  }

  static final public ImportBlock ImportBlock() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   {
   }
      hasFxnInScope = hasVarInScope = true;
    n1 = jj_consume_token(IMPORT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     return new ImportBlock(n0,n2,n3);
    // throw new Error("Missing return statement in function");
  }

  static final public MixinBlock MixinBlock() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   {
   }
      hasVarInScope = true;
    n1 = jj_consume_token(MIXIN);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     return new MixinBlock(n0,n2,n3);
    // throw new Error("Missing return statement in function");
  }

  static final public EvalBlock EvalBlock() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   {
   }
      hasFxnInScope = hasVarInScope = true;
    n1 = jj_consume_token(EVAL);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     return new EvalBlock(n0,n2,n3);
    // throw new Error("Missing return statement in function");
  }

  static final public VariableDeclaration VariableDeclaration(boolean canHaveVarAssignmentExpr) throws ParseException {
   Permissions n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Expression n9;

   {
   }
      hasVarInScope = true;
    n0 = Permissions(true);
    n2 = jj_consume_token(VAR);
              n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(IDENTIFIER);
                     n3 = JTBToolkit.makeIdentifierNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
        n6 = new NodeSequence(3);
      n8 = jj_consume_token(ASSIGN);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
         if ( !canHaveVarAssignmentExpr )
            parseError("");
      n9 = Expression();
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
     return new VariableDeclaration(n0,n1,n3,n5);
    // throw new Error("Missing return statement in function");
  }

  static final public FunctionDeclaration FunctionDeclaration() throws ParseException {
   Permissions n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   Arglist n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   PrimaryExpressionWithTrailingFxnCallExpList n15;
   FunctionCallExpressionList n16;
   NodeToken n17;
   Token n18;
   Program n19;
   NodeToken n20;
   Token n21;

   {
   }
      hasFxnInScope = hasVarInScope = true;
    n0 = Permissions(true);
    n2 = jj_consume_token(FUNCTION);
                   n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(IDENTIFIER);
                     n3 = JTBToolkit.makeIdentifierNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case IDENTIFIER:
      n8 = Arglist();
        n7.addNode(n8);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
        n12 = new NodeSequence(3);
      n14 = jj_consume_token(EXTENDS);
                      n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = PrimaryExpressionWithTrailingFxnCallExpList();
        n12.addNode(n15);
      n16 = FunctionCallExpressionList();
        n12.addNode(n16);
        n11.addNode(n12);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    n18 = jj_consume_token(LBRACE);
             n17 = JTBToolkit.makeNodeToken(n18);
      boolean savedIsStatic = isStatic;
      boolean savedIsInLoop = isInLoop;
      boolean savedIsInFunction = isInFunction;
      boolean savedHasVarInScope = hasVarInScope;
      boolean savedHasFxnInScope = hasFxnInScope;
      boolean savedForceScopeCreation = forceScopeCreation;
      forceScopeCreation = hasFxnInScope = hasVarInScope = false;
      isInFunction = true;
      isInLoop = false;
    n19 = Program(true);
      boolean hadVarInScope = hasVarInScope;
      boolean hadFxnInScope = hasFxnInScope;
      boolean hadForceScopeCreation = forceScopeCreation;
      hasVarInScope = savedHasVarInScope;
      hasFxnInScope = savedHasFxnInScope || hasFxnInScope;
      forceScopeCreation = savedForceScopeCreation;
      isStatic = savedIsStatic;
      isInLoop = savedIsInLoop;
      isInFunction = savedIsInFunction;
    n21 = jj_consume_token(RBRACE);
             n20 = JTBToolkit.makeNodeToken(n21);
     return new FunctionDeclaration(n0,n1,n3,n5,n7,n9,n11,n17,n19,n20,hadVarInScope||hadForceScopeCreation,hadFxnInScope);
    // throw new Error("Missing return statement in function");
  }

  static final public Arglist Arglist() throws ParseException {
   Permissions n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Permissions n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   {
   }
    n0 = Permissions(false);
    n2 = jj_consume_token(IDENTIFIER);
                     n1 = JTBToolkit.makeIdentifierNodeToken(n2);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
        n4 = new NodeSequence(3);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Permissions(false);
        n4.addNode(n7);
      n9 = jj_consume_token(IDENTIFIER);
                        n8 = JTBToolkit.makeIdentifierNodeToken(n9);
        n4.addNode(n8);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOTDOTDOT:
      n12 = jj_consume_token(DOTDOTDOT);
                  n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
     return new Arglist(n0,n1,n3,n10);
    // throw new Error("Missing return statement in function");
  }

  static final public TryStatement TryStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   EvaluationUnit n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Expression n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   EvaluationUnit n14;
   NodeOptional n15 = new NodeOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   EvaluationUnit n25;
   NodeOptional n26 = new NodeOptional();
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   EvaluationUnit n30;

   {
   }
    n1 = jj_consume_token(TRY);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EvaluationUnit();
    label_3:
    while (true) {
      if (jj_2_5(2147483647)) {
        ;
      } else {
        break label_3;
      }
        n4 = new NodeSequence(6);
      n6 = jj_consume_token(CATCH);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n8 = jj_consume_token(LPAREN);
               n7 = JTBToolkit.makeNodeToken(n8);
        n4.addNode(n7);
      n9 = Expression();
        n4.addNode(n9);
      n11 = jj_consume_token(IDENTIFIER);
                         n10 = JTBToolkit.makeIdentifierNodeToken(n11);
        n4.addNode(n10);
      n13 = jj_consume_token(RPAREN);
                n12 = JTBToolkit.makeNodeToken(n13);
        n4.addNode(n12);
      n14 = EvaluationUnit();
        n4.addNode(n14);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    if (jj_2_6(2147483647)) {
        n16 = new NodeSequence(5);
      n18 = jj_consume_token(CATCH);
                    n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
      n20 = jj_consume_token(LPAREN);
                n19 = JTBToolkit.makeNodeToken(n20);
        n16.addNode(n19);
      n22 = jj_consume_token(IDENTIFIER);
                         n21 = JTBToolkit.makeIdentifierNodeToken(n22);
        n16.addNode(n21);
      n24 = jj_consume_token(RPAREN);
                n23 = JTBToolkit.makeNodeToken(n24);
        n16.addNode(n23);
      n25 = EvaluationUnit();
        n16.addNode(n25);
        n15.addNode(n16);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
        n27 = new NodeSequence(2);
      n29 = jj_consume_token(FINALLY);
                      n28 = JTBToolkit.makeNodeToken(n29);
        n27.addNode(n28);
      n30 = EvaluationUnit();
        n27.addNode(n30);
        n26.addNode(n27);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
     return new TryStatement(n0,n2,n3,n15,n26);
    // throw new Error("Missing return statement in function");
  }

  static final public ForLoopStatement ForLoopStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   PreLoopStatement n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   Expression n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   Expression n13;
   NodeToken n14;
   Token n15;
   EvaluationUnit n16;

   {
   }
      boolean savedHasVarInScope = hasVarInScope;
      boolean savedHasFxnInScope = hasFxnInScope;
      boolean hadVarInScope = false;
      boolean hadFxnInScope = false;
      hasFxnInScope = hasVarInScope = false;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALLEE:
    case CONST:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SUPER:
    case THIS:
    case TRUE:
    case UNDEFINED:
    case VAR:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LFXNBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n5 = PreLoopStatement(true);
        n4.addNode(n5);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    n7 = jj_consume_token(SEMICOLON);
            n6 = JTBToolkit.makeNodeToken(n7);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALLEE:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case UNDEFINED:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LFXNBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n9 = Expression();
        n8.addNode(n9);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALLEE:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case UNDEFINED:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LFXNBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n13 = Expression();
        n12.addNode(n13);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    n15 = jj_consume_token(RPAREN);
             n14 = JTBToolkit.makeNodeToken(n15);
      boolean savedIsInLoop = isInLoop;
      isInLoop = true;
    n16 = EvaluationUnit();
      isInLoop = savedIsInLoop;
      hadVarInScope = hasVarInScope;
      hadFxnInScope = hasFxnInScope;
      hasVarInScope = savedHasVarInScope;
      hasFxnInScope = savedHasFxnInScope || hasFxnInScope;
     return new ForLoopStatement(n0,n2,n4,n6,n8,n10,n12,n14,n16,hadVarInScope,hadFxnInScope);
    // throw new Error("Missing return statement in function");
  }

  static final public CollectionForLoopStatement CollectionForLoopStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   PreLoopStatement n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   EvaluationUnit n10;

   {
   }
      boolean savedHasVarInScope = hasVarInScope;
      boolean savedHasFxnInScope = hasFxnInScope;
      boolean hadVarInScope = false;
      boolean hadFxnInScope = false;
      hasFxnInScope = hasVarInScope = false;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = PreLoopStatement(false);
    n6 = jj_consume_token(COLON);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
      boolean savedIsInLoop = isInLoop;
      isInLoop = true;
    n10 = EvaluationUnit();
      isInLoop = savedIsInLoop;
      hadVarInScope = hasVarInScope;
      hadFxnInScope = hasFxnInScope;
      hasVarInScope = savedHasVarInScope;
      hasFxnInScope = savedHasFxnInScope || hasFxnInScope;
     return new CollectionForLoopStatement(n0,n2,n4,n5,n7,n8,n10,hadVarInScope,hadFxnInScope);
    // throw new Error("Missing return statement in function");
  }

  static final public PreLoopStatement PreLoopStatement(boolean canHaveVarAssignmentExpr) throws ParseException {
   NodeChoice n0;
   VariableDeclaration n1;
   Expression n2;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case VAR:
      n1 = VariableDeclaration(canHaveVarAssignmentExpr);
        n0 = new NodeChoice(n1, 0);
      break;
    case CALLEE:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case UNDEFINED:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LFXNBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n2 = Expression();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     return new PreLoopStatement(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public WhileLoopStatement WhileLoopStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   EvaluationUnit n7;

   {
   }
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
      boolean savedIsInLoop = isInLoop;
      isInLoop = true;
    n7 = EvaluationUnit();
      isInLoop = savedIsInLoop;
     return new WhileLoopStatement(n0,n2,n4,n5,n7);
    // throw new Error("Missing return statement in function");
  }

  static final public ConditionalStatement ConditionalStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   EvaluationUnit n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   EvaluationUnit n12;

   {
   }
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = EvaluationUnit();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(ELSE);
                   n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = EvaluationUnit();
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
     return new ConditionalStatement(n0,n2,n4,n5,n7,n8);
    // throw new Error("Missing return statement in function");
  }

  static final public SynchronizedStatement SynchronizedStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   EvaluationUnit n7;

   {
   }
    n1 = jj_consume_token(SYNCHRONIZED);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = EvaluationUnit();
     return new SynchronizedStatement(n0,n2,n4,n5,n7);
    // throw new Error("Missing return statement in function");
  }

  static final public ReturnStatement ReturnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
      if ( !isInFunction )
         parseError("cannot return; not in function body");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALLEE:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case UNDEFINED:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LFXNBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n3 = Expression();
        n2.addNode(n3);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     return new ReturnStatement(n0,n2,n4);
    // throw new Error("Missing return statement in function");
  }

  static final public BreakStatement BreakStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
    n1 = jj_consume_token(BREAK);
                n0 = JTBToolkit.makeNodeToken(n1);
      if ( !isInLoop )
         parseError("cannot break; not in loop body");
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     return new BreakStatement(n0,n2);
    // throw new Error("Missing return statement in function");
  }

  static final public ContinueStatement ContinueStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
    n1 = jj_consume_token(CONTINUE);
                   n0 = JTBToolkit.makeNodeToken(n1);
      if ( !isInLoop )
         parseError("cannot continue; not in loop body");
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     return new ContinueStatement(n0,n2);
    // throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   {
   }
    n0 = AssignmentExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AssignmentExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new Expression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public FunctionCallExpressionList FunctionCallExpressionList() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   FunctionCallExpressionListBody n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALLEE:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case UNDEFINED:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LFXNBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n3 = FunctionCallExpressionListBody();
        n2.addNode(n3);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     return new FunctionCallExpressionList(n0,n2,n4);
    // throw new Error("Missing return statement in function");
  }

  static final public FunctionCallExpressionListBody FunctionCallExpressionListBody() throws ParseException {
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   {
   }
    n0 = AssignmentExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_5;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AssignmentExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new FunctionCallExpressionListBody(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public AssignmentExpression AssignmentExpression() throws ParseException {
   ConditionalExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   ConditionalExpression n28;

   {
   }
    n0 = ConditionalExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        n5 = jj_consume_token(ASSIGN);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case PLUSASSIGN:
        n7 = jj_consume_token(PLUSASSIGN);
                      n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case MINUSASSIGN:
        n9 = jj_consume_token(MINUSASSIGN);
                      n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      case STARASSIGN:
        n11 = jj_consume_token(STARASSIGN);
                       n10 = JTBToolkit.makeNodeToken(n11);
              n3 = new NodeChoice(n10, 3);
        break;
      case SLASHASSIGN:
        n13 = jj_consume_token(SLASHASSIGN);
                       n12 = JTBToolkit.makeNodeToken(n13);
              n3 = new NodeChoice(n12, 4);
        break;
      case REMASSIGN:
        n15 = jj_consume_token(REMASSIGN);
                       n14 = JTBToolkit.makeNodeToken(n15);
              n3 = new NodeChoice(n14, 5);
        break;
      case RSIGNEDSHIFTASSIGN:
        n17 = jj_consume_token(RSIGNEDSHIFTASSIGN);
                        n16 = JTBToolkit.makeNodeToken(n17);
              n3 = new NodeChoice(n16, 6);
        break;
      case LSHIFTASSIGN:
        n19 = jj_consume_token(LSHIFTASSIGN);
                        n18 = JTBToolkit.makeNodeToken(n19);
              n3 = new NodeChoice(n18, 7);
        break;
      case RUNSIGNEDSHIFTASSIGN:
        n21 = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                         n20 = JTBToolkit.makeNodeToken(n21);
              n3 = new NodeChoice(n20, 8);
        break;
      case ANDASSIGN:
        n23 = jj_consume_token(ANDASSIGN);
                       n22 = JTBToolkit.makeNodeToken(n23);
              n3 = new NodeChoice(n22, 9);
        break;
      case XORASSIGN:
        n25 = jj_consume_token(XORASSIGN);
                       n24 = JTBToolkit.makeNodeToken(n25);
              n3 = new NodeChoice(n24, 10);
        break;
      case ORASSIGN:
        n27 = jj_consume_token(ORASSIGN);
                       n26 = JTBToolkit.makeNodeToken(n27);
              n3 = new NodeChoice(n26, 11);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n28 = ConditionalExpression();
        n2.addNode(n28);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new AssignmentExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public ConditionalExpression ConditionalExpression() throws ParseException {
   LogicalOrExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalOrExpression n5;
   NodeToken n6;
   Token n7;
   LogicalOrExpression n8;

   {
   }
    n0 = LogicalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(HOOK);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = LogicalOrExpression();
        n2.addNode(n5);
      n7 = jj_consume_token(COLON);
               n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
      n8 = LogicalOrExpression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
     return new ConditionalExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public LogicalOrExpression LogicalOrExpression() throws ParseException {
   LogicalAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalAndExpression n5;

   {
   }
    n0 = LogicalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_OR);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = LogicalAndExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new LogicalOrExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public LogicalAndExpression LogicalAndExpression() throws ParseException {
   BitwiseOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   BitwiseOrExpression n5;

   {
   }
    n0 = BitwiseOrExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_8;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_AND);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = BitwiseOrExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new LogicalAndExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public BitwiseOrExpression BitwiseOrExpression() throws ParseException {
   BitwiseXorExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   BitwiseXorExpression n5;

   {
   }
    n0 = BitwiseXorExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_OR);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = BitwiseXorExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new BitwiseOrExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public BitwiseXorExpression BitwiseXorExpression() throws ParseException {
   BitwiseAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   BitwiseAndExpression n5;

   {
   }
    n0 = BitwiseAndExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(XOR);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = BitwiseAndExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new BitwiseXorExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public BitwiseAndExpression BitwiseAndExpression() throws ParseException {
   EqualityExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   EqualityExpression n5;

   {
   }
    n0 = EqualityExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_AND);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = EqualityExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new BitwiseAndExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public EqualityExpression EqualityExpression() throws ParseException {
   RelationalExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   RelationalExpression n8;

   {
   }
    n0 = RelationalExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_12;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        n5 = jj_consume_token(EQ);
                      n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case NE:
        n7 = jj_consume_token(NE);
                      n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = RelationalExpression();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new EqualityExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public RelationalExpression RelationalExpression() throws ParseException {
   ShiftExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   ShiftExpression n14;

   {
   }
    n0 = ShiftExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_13;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        n5 = jj_consume_token(LT);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case GT:
        n7 = jj_consume_token(GT);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case GE:
        n9 = jj_consume_token(GE);
                      n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      case LE:
        n11 = jj_consume_token(LE);
                       n10 = JTBToolkit.makeNodeToken(n11);
              n3 = new NodeChoice(n10, 3);
        break;
      case INSTANCEOF:
        n13 = jj_consume_token(INSTANCEOF);
                               n12 = JTBToolkit.makeNodeToken(n13);
              n3 = new NodeChoice(n12, 4);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n14 = ShiftExpression();
        n2.addNode(n14);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new RelationalExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public ShiftExpression ShiftExpression() throws ParseException {
   AdditiveExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   AdditiveExpression n10;

   {
   }
    n0 = AdditiveExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_14;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        n5 = jj_consume_token(LSHIFT);
                      n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case RSIGNEDSHIFT:
        n7 = jj_consume_token(RSIGNEDSHIFT);
                      n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case RUNSIGNEDSHIFT:
        n9 = jj_consume_token(RUNSIGNEDSHIFT);
                       n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n10 = AdditiveExpression();
        n2.addNode(n10);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new ShiftExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public AdditiveExpression AdditiveExpression() throws ParseException {
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   MultiplicativeExpression n8;

   {
   }
    n0 = MultiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_15;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n5 = jj_consume_token(PLUS);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case MINUS:
        n7 = jj_consume_token(MINUS);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = MultiplicativeExpression();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new AdditiveExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
   UnaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   UnaryExpression n10;

   {
   }
    n0 = UnaryExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_16;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        n5 = jj_consume_token(STAR);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case SLASH:
        n7 = jj_consume_token(SLASH);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case REM:
        n9 = jj_consume_token(REM);
                     n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n10 = UnaryExpression();
        n2.addNode(n10);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new MultiplicativeExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public UnaryExpression UnaryExpression() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   PostfixExpression n14;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        n3 = jj_consume_token(INCR);
                      n2 = JTBToolkit.makeNodeToken(n3);
              n1 = new NodeChoice(n2, 0);
        break;
      case DECR:
        n5 = jj_consume_token(DECR);
                      n4 = JTBToolkit.makeNodeToken(n5);
              n1 = new NodeChoice(n4, 1);
        break;
      case PLUS:
        n7 = jj_consume_token(PLUS);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n1 = new NodeChoice(n6, 2);
        break;
      case MINUS:
        n9 = jj_consume_token(MINUS);
                     n8 = JTBToolkit.makeNodeToken(n9);
              n1 = new NodeChoice(n8, 3);
        break;
      case TILDE:
        n11 = jj_consume_token(TILDE);
                      n10 = JTBToolkit.makeNodeToken(n11);
              n1 = new NodeChoice(n10, 4);
        break;
      case BANG:
        n13 = jj_consume_token(BANG);
                      n12 = JTBToolkit.makeNodeToken(n13);
              n1 = new NodeChoice(n12, 5);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    n14 = PostfixExpression();
     return new UnaryExpression(n0,n14);
    // throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression PostfixExpression() throws ParseException {
   TypeExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    n0 = TypeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        n4 = jj_consume_token(INCR);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
        break;
      case DECR:
        n6 = jj_consume_token(DECR);
                   n5 = JTBToolkit.makeNodeToken(n6);
           n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
     return new PostfixExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public TypeExpression TypeExpression() throws ParseException {
   NodeChoice n0;
   AllocationExpression n1;
   CastExpression n2;
   PrimaryExpression n3;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      n1 = AllocationExpression();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[42] = jj_gen;
      if (jj_2_7(2147483647)) {
        n2 = CastExpression();
        n0 = new NodeChoice(n2, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CALLEE:
        case FALSE:
        case FUNCTION:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case UNDEFINED:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case REGEXP_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LFXNBRACE:
        case LBRACKET:
          n3 = PrimaryExpression();
        n0 = new NodeChoice(n3, 2);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     return new TypeExpression(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public AllocationExpression AllocationExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpressionWithTrailingFxnCallExpList n2;
   FunctionCallExpressionList n3;

   {
   }
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpressionWithTrailingFxnCallExpList();
    n3 = FunctionCallExpressionList();
     return new AllocationExpression(n0,n2,n3);
    // throw new Error("Missing return statement in function");
  }

  static final public CastExpression CastExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpressionNotFunction n2;
   NodeToken n3;
   Token n4;
   PrimaryExpression n5;

   {
   }
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpressionNotFunction();
    n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = PrimaryExpression();
     return new CastExpression(n0,n2,n3,n5);
    // throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException {
   PrimaryPrefix n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimaryPostfix n2;

   {
   }
    n0 = PrimaryPrefix();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_17;
      }
      n2 = PrimaryPostfix();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new PrimaryExpression(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpressionNotFunction PrimaryExpressionNotFunction() throws ParseException {
   PrimaryPrefixNotFunction n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimaryPostfix n2;

   {
   }
    n0 = PrimaryPrefixNotFunction();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_18;
      }
      n2 = PrimaryPostfix();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new PrimaryExpressionNotFunction(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpressionWithTrailingFxnCallExpList PrimaryExpressionWithTrailingFxnCallExpList() throws ParseException {
   PrimaryPrefix n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimaryPostfixWithTrailingFxnCallExpList n2;

   {
   }
    n0 = PrimaryPrefix();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_19;
      }
      n2 = PrimaryPostfixWithTrailingFxnCallExpList();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     return new PrimaryExpressionWithTrailingFxnCallExpList(n0,n1);
    // throw new Error("Missing return statement in function");
  }

  static final public PrimaryPrefix PrimaryPrefix() throws ParseException {
   NodeChoice n0;
   PrimaryPrefixNotFunction n1;
   FunctionPrimaryPrefix n2;
   ShorthandFunctionPrimaryPrefix n3;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALLEE:
    case FALSE:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case UNDEFINED:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
      n1 = PrimaryPrefixNotFunction();
        n0 = new NodeChoice(n1, 0);
      break;
    case FUNCTION:
      n2 = FunctionPrimaryPrefix();
        n0 = new NodeChoice(n2, 1);
      break;
    case LFXNBRACE:
      n3 = ShorthandFunctionPrimaryPrefix();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     return new PrimaryPrefix(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public PrimaryPrefixNotFunction PrimaryPrefixNotFunction() throws ParseException {
   NodeChoice n0;
   ThisPrimaryPrefix n1;
   SuperPrimaryPrefix n2;
   CalleePrimaryPrefix n3;
   ArrayDeclarationPrimaryPrefix n4;
   IdentifierPrimaryPrefix n5;
   ParenPrimaryPrefix n6;
   Literal n7;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      n1 = ThisPrimaryPrefix();
        n0 = new NodeChoice(n1, 0);
      break;
    case SUPER:
      n2 = SuperPrimaryPrefix();
        n0 = new NodeChoice(n2, 1);
      break;
    case CALLEE:
      n3 = CalleePrimaryPrefix();
        n0 = new NodeChoice(n3, 2);
      break;
    case LBRACKET:
      n4 = ArrayDeclarationPrimaryPrefix();
        n0 = new NodeChoice(n4, 3);
      break;
    case IDENTIFIER:
      n5 = IdentifierPrimaryPrefix();
        n0 = new NodeChoice(n5, 4);
      break;
    case LPAREN:
      n6 = ParenPrimaryPrefix();
        n0 = new NodeChoice(n6, 5);
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case UNDEFINED:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case REGEXP_LITERAL:
      n7 = Literal();
        n0 = new NodeChoice(n7, 6);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     return new PrimaryPrefixNotFunction(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public ThisPrimaryPrefix ThisPrimaryPrefix() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(THIS);
               n0 = JTBToolkit.makeNodeToken(n1);
     return new ThisPrimaryPrefix(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public SuperPrimaryPrefix SuperPrimaryPrefix() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
      forceScopeCreation = true;
    n1 = jj_consume_token(SUPER);
                n0 = JTBToolkit.makeNodeToken(n1);
     return new SuperPrimaryPrefix(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public CalleePrimaryPrefix CalleePrimaryPrefix() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
      forceScopeCreation = true;
    n1 = jj_consume_token(CALLEE);
                 n0 = JTBToolkit.makeNodeToken(n1);
     return new CalleePrimaryPrefix(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public IdentifierPrimaryPrefix IdentifierPrimaryPrefix() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeIdentifierNodeToken(n1);
     return new IdentifierPrimaryPrefix(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public ParenPrimaryPrefix ParenPrimaryPrefix() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   {
   }
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     return new ParenPrimaryPrefix(n0,n2,n3);
    // throw new Error("Missing return statement in function");
  }

  static final public FunctionPrimaryPrefix FunctionPrimaryPrefix() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   Arglist n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   PrimaryExpressionWithTrailingFxnCallExpList n12;
   FunctionCallExpressionList n13;
   NodeToken n14;
   Token n15;
   Program n16;
   NodeToken n17;
   Token n18;

   {
   }
      hasFxnInScope = true;
    n1 = jj_consume_token(FUNCTION);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case IDENTIFIER:
      n5 = Arglist();
        n4.addNode(n5);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
        n9 = new NodeSequence(3);
      n11 = jj_consume_token(EXTENDS);
                      n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = PrimaryExpressionWithTrailingFxnCallExpList();
        n9.addNode(n12);
      n13 = FunctionCallExpressionList();
        n9.addNode(n13);
        n8.addNode(n9);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    n15 = jj_consume_token(LBRACE);
             n14 = JTBToolkit.makeNodeToken(n15);
      boolean savedIsStatic = isStatic;
      boolean savedIsInLoop = isInLoop;
      boolean savedIsInFunction = isInFunction;
      boolean savedHasVarInScope = hasVarInScope;
      boolean savedHasFxnInScope = hasFxnInScope;
      boolean savedForceScopeCreation = forceScopeCreation;
      forceScopeCreation = hasFxnInScope = hasVarInScope = false;
      isInFunction = true;
      isInLoop = false;
    n16 = Program(true);
      boolean hadVarInScope = hasVarInScope;
      boolean hadFxnInScope = hasFxnInScope;
      boolean hadForceScopeCreation = forceScopeCreation;
      hasVarInScope = savedHasVarInScope;
      hasFxnInScope = savedHasFxnInScope || hasFxnInScope;
      forceScopeCreation = savedForceScopeCreation;
      isStatic = savedIsStatic;
      isInLoop = savedIsInLoop;
      isInFunction = savedIsInFunction;
    n18 = jj_consume_token(RBRACE);
             n17 = JTBToolkit.makeNodeToken(n18);
     return new FunctionPrimaryPrefix(n0,n2,n4,n6,n8,n14,n16,n17,hadVarInScope||hadForceScopeCreation,hadFxnInScope);
    // throw new Error("Missing return statement in function");
  }

  static final public ShorthandFunctionPrimaryPrefix ShorthandFunctionPrimaryPrefix() throws ParseException {
   NodeToken n0;
   Token n1;
   Program n2;
   NodeToken n3;
   Token n4;

   {
   }
      hasFxnInScope = true;
    n1 = jj_consume_token(LFXNBRACE);
             n0 = JTBToolkit.makeNodeToken(n1);
      boolean savedIsStatic = isStatic;
      boolean savedIsInLoop = isInLoop;
      boolean savedIsInFunction = isInFunction;
      boolean savedHasVarInScope = hasVarInScope;
      boolean savedHasFxnInScope = hasFxnInScope;
      boolean savedForceScopeCreation = forceScopeCreation;
      forceScopeCreation = hasFxnInScope = hasVarInScope = false;
      isInFunction = true;
      isInLoop = false;
    n2 = Program(true);
      boolean hadVarInScope = hasVarInScope;
      boolean hadFxnInScope = hasFxnInScope;
      boolean hadForceScopeCreation = forceScopeCreation;
      hasVarInScope = savedHasVarInScope;
      hasFxnInScope = savedHasFxnInScope || hasFxnInScope;
      forceScopeCreation = savedForceScopeCreation;
      isStatic = savedIsStatic;
      isInLoop = savedIsInLoop;
      isInFunction = savedIsInFunction;
    n4 = jj_consume_token(RBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
     return new ShorthandFunctionPrimaryPrefix(n0,n2,n3,hadVarInScope||hadForceScopeCreation,hadFxnInScope);
    // throw new Error("Missing return statement in function");
  }

  static final public ArrayDeclarationPrimaryPrefix ArrayDeclarationPrimaryPrefix() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   FunctionCallExpressionListBody n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(LBRACKET);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALLEE:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case UNDEFINED:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LFXNBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n3 = FunctionCallExpressionListBody();
        n2.addNode(n3);
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    n5 = jj_consume_token(RBRACKET);
            n4 = JTBToolkit.makeNodeToken(n5);
     return new ArrayDeclarationPrimaryPrefix(n0,n2,n4);
    // throw new Error("Missing return statement in function");
  }

  static final public PrimaryPostfix PrimaryPostfix() throws ParseException {
   NodeChoice n0;
   FunctionCallPrimaryPostfix n1;
   ArraySubscriptPrimaryPostfix n2;
   ThisScopeQualifierPrimaryPostfix n3;
   PropertyIdentifierPrimaryPostfix n4;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n1 = FunctionCallPrimaryPostfix();
        n0 = new NodeChoice(n1, 0);
      break;
    case LBRACKET:
      n2 = ArraySubscriptPrimaryPostfix();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[52] = jj_gen;
      if (jj_2_8(2147483647)) {
        n3 = ThisScopeQualifierPrimaryPostfix();
        n0 = new NodeChoice(n3, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          n4 = PropertyIdentifierPrimaryPostfix();
        n0 = new NodeChoice(n4, 3);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     return new PrimaryPostfix(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public PrimaryPostfixWithTrailingFxnCallExpList PrimaryPostfixWithTrailingFxnCallExpList() throws ParseException {
   NodeChoice n0;
   ArraySubscriptPrimaryPostfix n1;
   ThisScopeQualifierPrimaryPostfix n2;
   PropertyIdentifierPrimaryPostfix n3;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      n1 = ArraySubscriptPrimaryPostfix();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_9(2147483647)) {
        n2 = ThisScopeQualifierPrimaryPostfix();
        n0 = new NodeChoice(n2, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          n3 = PropertyIdentifierPrimaryPostfix();
        n0 = new NodeChoice(n3, 2);
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     return new PrimaryPostfixWithTrailingFxnCallExpList(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public FunctionCallPrimaryPostfix FunctionCallPrimaryPostfix() throws ParseException {
   FunctionCallExpressionList n0;

   {
   }
    n0 = FunctionCallExpressionList();
     return new FunctionCallPrimaryPostfix(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public ArraySubscriptPrimaryPostfix ArraySubscriptPrimaryPostfix() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(LBRACKET);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(117);
                n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Expression();
        n4.addNode(n7);
        n3.addNode(n4);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RBRACKET);
            n8 = JTBToolkit.makeNodeToken(n9);
     return new ArraySubscriptPrimaryPostfix(n0,n2,n3,n8);
    // throw new Error("Missing return statement in function");
  }

  static final public PropertyIdentifierPrimaryPostfix PropertyIdentifierPrimaryPostfix() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeIdentifierNodeToken(n3);
     return new PropertyIdentifierPrimaryPostfix(n0,n2);
    // throw new Error("Missing return statement in function");
  }

  static final public ThisScopeQualifierPrimaryPostfix ThisScopeQualifierPrimaryPostfix() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(THIS);
               n2 = JTBToolkit.makeNodeToken(n3);
     return new ThisScopeQualifierPrimaryPostfix(n0,n2);
    // throw new Error("Missing return statement in function");
  }

  static final public Literal Literal() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
                             n1 = JTBToolkit.makeLiteralNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOATING_POINT_LITERAL:
      n4 = jj_consume_token(FLOATING_POINT_LITERAL);
                                    n3 = JTBToolkit.makeLiteralNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case STRING_LITERAL:
      n6 = jj_consume_token(STRING_LITERAL);
                            n5 = JTBToolkit.makeLiteralNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case REGEXP_LITERAL:
      n8 = jj_consume_token(REGEXP_LITERAL);
                            n7 = JTBToolkit.makeLiteralNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case TRUE:
      n10 = jj_consume_token(TRUE);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case FALSE:
      n12 = jj_consume_token(FALSE);
                    n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case NULL:
      n14 = jj_consume_token(NULL);
                   n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case UNDEFINED:
      n16 = jj_consume_token(UNDEFINED);
                        n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     return new Literal(n0);
    // throw new Error("Missing return statement in function");
  }

  static final public Permissions Permissions(boolean staticOk) throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   {
   }
      String p = null;
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        n3 = jj_consume_token(STATIC);
                       n2 = JTBToolkit.makeNodeToken(n3);
            if ( !staticOk )
               parseError("cannot be static");
            isStatic = true;
           n1 = new NodeChoice(n2, 0);
        break;
      case CONST:
        n5 = jj_consume_token(CONST);
                      n4 = JTBToolkit.makeNodeToken(n5);
           n1 = new NodeChoice(n4, 1);
        break;
      case PRIVATE:
        n7 = jj_consume_token(PRIVATE);
                        n6 = JTBToolkit.makeNodeToken(n7);
            if ( p != null )
               parseError("cannot be private and " + p);
            p = "private";
           n1 = new NodeChoice(n6, 2);
        break;
      case PROTECTED:
        n9 = jj_consume_token(PROTECTED);
                          n8 = JTBToolkit.makeNodeToken(n9);
            if ( p != null )
               parseError("cannot be protected and " + p);
            p = "protected";
           n1 = new NodeChoice(n8, 3);
        break;
      case PUBLIC:
        n11 = jj_consume_token(PUBLIC);
                        n10 = JTBToolkit.makeNodeToken(n11);
            if ( p != null )
               parseError("cannot be public and " + p);
            p = "public";
           n1 = new NodeChoice(n10, 4);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     return new Permissions(n0);
    // throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_7();
    jj_save(6, xla);
    return retval;
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_8();
    jj_save(7, xla);
    return retval;
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_9();
    jj_save(8, xla);
    return retval;
  }

  static final private boolean jj_3R_47() {
    if (jj_3R_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(VAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_3R_70()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_154() {
    if (jj_3R_160()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_3R_69()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_174() {
    if (jj_scan_token(NE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_3R_68()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_134() {
    if (jj_3R_65()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_154()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_173() {
    if (jj_scan_token(EQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_3R_67()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_147() {
    if (jj_3R_135()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_153() {
    if (jj_scan_token(DOTDOTDOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_169()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_3R_104()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_166() {
    if (jj_3R_149()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_167() {
    if (jj_3R_169()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_152() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_165() {
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_3R_63()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_164() {
    if (jj_3R_148()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_133() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    xsp = jj_scanpos;
    if (jj_3R_153()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_115() {
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_3R_104()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_36() {
    if (jj_3R_65()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_168() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_167()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_3R_149()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_128() {
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_161() {
    if (jj_3R_167()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_3R_148()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_126() {
    if (jj_3R_147()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_108() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_132()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_35()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_36()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_162() {
    if (jj_scan_token(XOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_161()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_138() {
    if (jj_3R_158()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_156() {
    if (jj_3R_161()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_209() {
    if (jj_scan_token(NEW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_134()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_135()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_122() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_110() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_134()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_135()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_25()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_109() {
    if (jj_3R_133()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_206() {
    if (jj_3R_36()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_157() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_156()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_205() {
    if (jj_3R_25()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_204() {
    if (jj_3R_209()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_108()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_scan_token(IF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_136() {
    if (jj_3R_156()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_157()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_208() {
    if (jj_scan_token(DECR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_207() {
    if (jj_scan_token(INCR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_137() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_136()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_117() {
    if (jj_3R_136()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_scan_token(LFXNBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_108()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_192() {
    if (jj_3R_202()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_201() {
    if (jj_scan_token(BANG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_200() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_118() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_117()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_199() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(VAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_3R_117()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_198() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_197() {
    if (jj_scan_token(DECR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_196() {
    if (jj_scan_token(INCR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_3R_82()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_192()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_151() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_134()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_135()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_scan_token(EVAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_150() {
    if (jj_3R_133()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_130() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_108()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_195() {
    if (jj_scan_token(REM)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_194() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_96() {
    if (jj_scan_token(ORASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_193() {
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_scan_token(MIXIN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_95() {
    if (jj_scan_token(XORASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_32()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_94() {
    if (jj_scan_token(ANDASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_187()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_scan_token(PRIVATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_scan_token(CONST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_182() {
    if (jj_3R_187()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_scan_token(REMASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_124() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_scan_token(STARASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_87() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_21() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_190() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_123() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_189() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_61()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_scan_token(THROW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_33() {
    if (jj_3R_61()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_182()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_3R_32()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_175() {
    if (jj_3R_182()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_121() {
    if (jj_scan_token(CALLEE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_146() {
    if (jj_scan_token(UNDEFINED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_145() {
    if (jj_scan_token(NULL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_144() {
    if (jj_scan_token(FALSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_143() {
    if (jj_scan_token(TRUE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_142() {
    if (jj_scan_token(REGEXP_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_141() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_120() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_186() {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_140() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_3R_82()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_185() {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_139() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_184() {
    if (jj_scan_token(LSHIFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_119() {
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_163() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_33()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_175()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_158() {
    if (jj_3R_33()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_163()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_171() {
    if (jj_3R_175()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_113() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_3R_125()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_102() {
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_3R_123()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_108()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_155() {
    if (jj_3R_158()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_99() {
    if (jj_3R_121()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_112() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_135() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_181() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_97() {
    if (jj_3R_119()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_180() {
    if (jj_scan_token(LE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_179() {
    if (jj_scan_token(GE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_3R_80()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_178() {
    if (jj_scan_token(GT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_149() {
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_56() {
    if (jj_3R_79()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_177() {
    if (jj_scan_token(LT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_scan_token(TRY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_3R_76()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_34() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_33()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_171()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_3R_75()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_107() {
    if (jj_3R_131()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_3R_33()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_169() {
    if (jj_3R_171()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_3R_74()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_106() {
    if (jj_3R_130()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_3R_73()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_3R_63()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_159() {
    if (jj_scan_token(117)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_3R_72()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_3R_71()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_148() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public OscriptParserTokenManager token_source;
  static ASCII_UCodeESC_CharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[60];
  static final private int[] jj_la1_0 = {0x20000,0xb0d80000,0x0,0x0,0x30980000,0x0,0x400000,0x8000000,0x0,0x2000000,0x40000000,0x20500000,0x20100000,0x20100000,0x20500000,0x4000000,0x20100000,0x0,0x20100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20100000,0x0,0x0,0x0,0x20100000,0x20100000,0x400000,0x8000000,0x20100000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x400000,0x400000,};
  static final private int[] jj_la1_1 = {0x0,0xa86ffffb,0x0,0x20000,0xa865f47b,0x0,0xb80,0x0,0x0,0x0,0x0,0xa84d5be1,0xa8455061,0xa8455061,0xa84d5be1,0x0,0xa8455061,0x0,0xa8455061,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0xa8455041,0x0,0x0,0x0,0xa8455041,0xa8455040,0xb80,0x0,0xa8455061,0x0,0x0,0x0,0x0,0x0,0xa8450040,0xb80,0xb80,};
  static final private int[] jj_la1_2 = {0x0,0xe0180b48,0x200,0x0,0xe0180948,0x10000,0x8,0x0,0x4000,0x0,0x0,0xe0180948,0xe0180948,0xe0180948,0xe0180948,0x0,0xe0180948,0x4000,0xe0180948,0x4000,0x10000,0x10000,0x200000,0x8000000,0x10000000,0x0,0x0,0x0,0x4800000,0x4800000,0x3060000,0x3060000,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0xe0180000,0xe0180000,0x60000000,0x60000000,0x0,0x948,0x8840,0x8840,0x8800,0x948,0x848,0x8,0x0,0xe0180948,0x840,0x8000,0x800,0x8000,0x0,0x0,0x0,0x0,};
  static final private int[] jj_la1_3 = {0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x0,0x1,0x0,0x1,0x0,0x1ffc00,0x1ffc00,0x0,0x0,0x0,0x10,0x20,0x8,0x0,0x0,0x0,0x0,0x380,0x380,0x1,0x1,0x46,0x46,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,};
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public OscriptParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new OscriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    OscriptParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OscriptParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new OscriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    OscriptParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OscriptParser(OscriptParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(OscriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = OscriptParserTokenManager.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = OscriptParserTokenManager.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = OscriptParserTokenManager.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = OscriptParserTokenManager.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=OscriptParserTokenManager.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enumeration = jj_expentries.elements(); enumeration.hasMoreElements();) {
        int[] oldentry = (int[])(enumeration.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[118];
    for (int i = 0; i < 118; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 118; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
    static NodeToken makeNodeTokenImpl( Token t, NodeToken node ) {
      OscriptParser.addNodeToken(node);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
//        Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), null, t));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
    }
    
   static NodeToken makeNodeToken(Token t) {
      return makeNodeTokenImpl( t, new NodeToken(t.image.intern(), null, t) );
   }
   static NodeToken makeLiteralNodeToken(Token t) {
      return makeNodeTokenImpl( t, new NodeToken(t.image.intern(), new oscript.data.OString(t.image), t) );
   }
   static NodeToken makeIdentifierNodeToken(Token t) {
      return makeNodeTokenImpl( t, new NodeToken(t.image.intern(), oscript.data.Symbol.getSymbol(t.image), t) );
   }
}
